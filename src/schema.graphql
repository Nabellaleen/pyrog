# import Database, Resource, Attribute from "./generated/prisma-binding/prisma.graphql"

type Query {
    # BINDING QUERIES
    inputColumns(where: InputColumnWhereInput): [InputColumn!]
    resource(where: ResourceWhereUniqueInput): Resource!
    resources(where: ResourceWhereInput): [Resource]!

    # CLIENT QUERIES
    allDatabases: [Database!]!
    availableResources(databaseId: ID!): [Resource!]
    recAvailableAttributes(resourceId: ID!): [Attribute!]
    me: User
    isAuthenticated: Boolean!
    # countMappedAttributes(databaseId: ID!): Int
    computeDatabaseMappingProgress(databaseId: ID!): [Int!]
}

type Mutation {
    createDatabase(databaseName: String!): Database!
    createInputColumnAndUpdateAttribute(attributeId: ID!, data: InputColumnCreateWithoutAttributeInput): InputColumn!
    deleteInputColumnAndUpdateAttribute(attributeId: ID!, inputColumnId: ID!): InputColumn!
    createJoinAndUpdateInputColumn(inputColumnId: ID!, data: JoinCreateWithoutInputColumnInput): Join!
    deleteJoinAndUpdateInputColumn(inputColumnId: ID!, joinId: ID!): Join!

    updateAttribute(id: ID!, data: AttributeUpdateInput): Attribute!
    updateInputColumn(id: ID!, data: InputColumnUpdateInput): InputColumn!
    updateJoin(id: ID!, data: JoinUpdateInput): Join!

    createResourceTreeInDatabase(databaseId: ID!, resourceName: String!): Resource!
    createAttributeProfileInAttribute(parentAttributeId: ID!, attributeName: String!, attributeType: String!): Attribute!
    deleteAttribute(id: ID!): Attribute!

    signup(email: String!, password: String!, name: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
}

type Subscription {
    attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
    inputColumn(where: InputColumnSubscriptionWhereInput): InputColumnSubscriptionPayload
    join(where: JoinSubscriptionWhereInput): JoinSubscriptionPayload
}

type AuthPayload {
    token: String!
    user: User!
}
