# import Database, Resource, Attribute from "./generated/prisma-binding/prisma.graphql"

type Query {
    # BINDING QUERIES
    inputColumns(where: InputColumnWhereInput): [InputColumn!]
    resource(where: ResourceWhereUniqueInput): Resource!

    # CLIENT QUERIES
    allDatabases: [Database!]!
    availableResources(database: String!): [Resource!]
    recAvailableAttributes(resourceId: ID!): [Attribute!]
    me: User
}

type Mutation {
    createInputColumnAndUpdateAttribute(attributeId: ID!, data: InputColumnCreateWithoutAttributeInput): InputColumn!
    deleteInputColumnAndUpdateAttribute(attributeId: ID!, inputColumnId: ID!): InputColumn!
    updateInputColumn(id: ID!, data: InputColumnUpdateInput): InputColumn!
    # updateAttributeNoId(database: String!, resource: String!, attributePath: [String!]!, data: AttributeUpdateInput): Attribute!
    # updateAttribute(id: ID!, data: AttributeUpdateInput): Attribute!
    # updateInputColumn(id: ID!, data: InputColumnUpdateInput): InputColumn!
    # updateResource(id: ID!, data: ResourceUpdateInput): Resource!
    # updateJoin(id: ID!, data: JoinUpdateInput): Join!
    createResourceTreeInDatabase(database: String!, resource: String!): Resource!
    createAttributeProfileInAttribute(parent_attribute_id: ID!, child_attribute_name: String!, child_attribute_type: String!): Attribute!
    deleteAttribute(id: ID!): Attribute!

    signup(email: String!, password: String!, name: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
}

type Subscription {
    attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
    attributeInputColumns(id: ID!): [InputColumn!]
    inputColumn(id: ID!): InputColumn
    resource(id: ID!): Resource
    join(id: ID!): Join
}

type AuthPayload {
    token: String!
    user: User!
}
